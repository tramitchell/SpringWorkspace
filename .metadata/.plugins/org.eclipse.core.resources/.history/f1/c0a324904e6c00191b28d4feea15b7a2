package com.revature.util;

public class MyLinkedList<T> 
{
	// root node (the head)
	private Node<T> head;
	
	// end node (the tail)
	private Node<T> tail;
	
	// insert a node at the end of the linked list
	public void insert(T data)
	{
		// create a new node obj whose nextNode value is null,
		// and contains some data
		Node<T> newNode = new Node<>(data, null);
		
		// if the head of this linked list is null, then the new node will
		// become the head and the tail of this list
		if(this.head == null)
		{
			System.out.println("List is empty... adding first element");
			this.tail = this.head = newNode;
		}
		// set tail node's nextNode to point to the new node
		// set tail to point to new Node
		else
		{
			System.out.println("List has contents... adding new node to the tail of the list");
			this.tail.setNextNode(newNode);
			this.tail = newNode; 
			
		}
	}
	
	public void printList()
	{
		// start with the head of this list
		Node<T> currentNode = this.head;
		
		// while currentNode is not null, print out the node info and move on the the next node
		while(currentNode != null)
		{
			System.out.println("Node Value: " + currentNode.getData());
			currentNode = currentNode.getNextNode();
		}
	}
	
	/*
	 * pop
	 * peek
	 * remove
	 * removeDuplicate
	 */
	
	public T peek()
	{
		return this.head.getData();
	}
	
}
